#define NUM_THREADS 8

#include "SimplexNoise3D.hlsl"

float _Radius, _Amount, _DeltaTime, _Extinguishment;
float4 _Pos, _Resolution;
float4 _NoiseSpeedScale, _NoiseOctavesTime;

RWStructuredBuffer<float> _Write;
StructuredBuffer<float> _Read, _Reaction;

#pragma kernel GaussImpulse

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void GaussImpulse(uint3 id : SV_DispatchThreadID)
{
	float3 pos = id / (_Resolution.xyz - 1.0f) - _Pos.xyz;
	float mag = pos.x * pos.x + pos.y * pos.y + pos.z * pos.z;
	float rad2 = _Radius * _Radius;

	float amount = exp(-mag / rad2) * _Amount * _DeltaTime;

	int idx = id.x + id.y*_Resolution.x + id.z*_Resolution.x*_Resolution.y;
	
    _Write[idx] = _Read[idx] + amount;
}

#pragma kernel NoiseImpulse

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void NoiseImpulse(uint3 id : SV_DispatchThreadID)
{
	float3 uv = id / (_Resolution.xyz - 1.0f);

	float noise = SimplexNoise_Octaves(uv, _NoiseSpeedScale.w, _NoiseSpeedScale.xyz, uint(_NoiseOctavesTime.x), _NoiseOctavesTime.y, _NoiseOctavesTime.z, _NoiseOctavesTime.w);
	float amount = noise * _Amount * _DeltaTime;

	int idx = id.x + id.y * _Resolution.x + id.z * _Resolution.x * _Resolution.y;

	_Write[idx] = _Read[idx] + amount;
}

#pragma kernel ExtinguishmentImpulse

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void ExtinguishmentImpulse(uint3 id : SV_DispatchThreadID)
{
			
	int idx = id.x + id.y*_Resolution.x + id.z*_Resolution.x*_Resolution.y;
	
	float amount = 0.0;
	float reaction = _Reaction[idx];
	
	if(reaction > 0.0 && reaction < _Extinguishment) 
		amount = _Amount * reaction;
	
    _Write[idx] = _Read[idx] + amount;
}















