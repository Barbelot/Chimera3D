
#define NUM_THREADS 8

float _Radius, _Amount, _DeltaTime, _Extinguishment;
float4 _Pos, _Size;

RWStructuredBuffer<float> _Write;
StructuredBuffer<float> _Read, _Reaction;

//struct Emitter {
//	float4 position;
//	float4 data;//x = radius, y = density amount, z = temperature amount
//};
//
//StructuredBuffer<Emitter> _Emitters;
//int _EmittersCount;

#pragma kernel GaussImpulse

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void GaussImpulse(uint3 id : SV_DispatchThreadID)
{
	float3 pos = id / (_Size.xyz - 1.0f) - _Pos.xyz;
	float mag = pos.x * pos.x + pos.y * pos.y + pos.z * pos.z;
	float rad2 = _Radius * _Radius;

	float amount = exp(-mag / rad2) * _Amount * _DeltaTime;

	//float amount = 0;
	//float3 pos;
	//float mag, rad2;

	//for (int i = 0; i < _EmittersCount; i++) {
	//	pos = id / (_Size.xyz - 1.0f) - _Emitters[i].position.xyz;
	//	mag = pos.x * pos.x + pos.y * pos.y + pos.z * pos.z;
	//	rad2 = _Emitters[i].data.x * _Emitters[i].data.x;

	//	amount += exp(-mag / rad2) * _Emitters[i].data.y * _DeltaTime;
	//}

	int idx = id.x + id.y*_Size.x + id.z*_Size.x*_Size.y;
	
    _Write[idx] = _Read[idx] + amount;
}

#pragma kernel ExtinguishmentImpulse

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void ExtinguishmentImpulse(uint3 id : SV_DispatchThreadID)
{
			
	int idx = id.x + id.y*_Size.x + id.z*_Size.x*_Size.y;
	
	float amount = 0.0;
	float reaction = _Reaction[idx];
	
	if(reaction > 0.0 && reaction < _Extinguishment) 
		amount = _Amount * reaction;
	
    _Write[idx] = _Read[idx] + amount;
}















